using CAT.App.D365.Service.Core;
using CAT.App.D365.Service.Core.Utilities;
using CAT.App.D365.Service.Core.Utilities.Interface;
using CAT.App.D365.Service.Infra.Service;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata;
using System.Text;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Application.Service
{
    public class CompanyApplication : ICompanyApplication
    {
        private readonly ICompanyService _service;
        private readonly IPeriodService _periodService;
        private readonly ILiquidTemplateService _liquidTemplateService;

        public CompanyApplication(ICompanyService service, IPeriodService periodService, ILiquidTemplateService liquidTemplateService)
        {
            _service = service;
            _periodService = periodService;
            _liquidTemplateService = liquidTemplateService;
        }

        public async Task<string> CreateCompanyAsync(string companyInfo)
        {
            var payload = await _liquidTemplateService.GetLiquidTemplateAsync(companyInfo, LiquidTemplateConstants.CREATE_COMPANY_RECORD_TEMPLATE);

            var response = await _service.CreateCompanyAsync(payload);
            return response.ToString();
        }

        public async Task<string> GetCompanyCurrentPeriodAsync(string dataAreaId)
        {
            string calendarResponseMsg = await _periodService.GetCalendarForCompanyAsync(dataAreaId);
            dynamic calendarResponseJson = JObject.Parse(calendarResponseMsg.ToString())["value"];
            
            if (calendarResponseJson.Count == 0)
            {
                throw new Exception("Calendar not found for company provided");
            }

            string responseLedgerFP = await _service.GetLedgerFiscalPeriodsAsync(dataAreaId, calendarResponseJson[0].FiscalCalendar.ToString());
            var combinedEntities = new List<JObject>();
            var currentOpenPeriodJson = new JObject();
            var responseJson = new JObject();
            string currentOpenPeriod = "0000 00";
            string minYear = "0000";

            // Check if responseLedgerFP is null or empty, or NOT a valid json, or if ledgerFiscalPeriods is empty
            if (string.IsNullOrEmpty(responseLedgerFP) || !JsonConversionExtensions.IsValidJson(responseLedgerFP) ||
                    (JObject.Parse(responseLedgerFP)["value"] != null && !JObject.Parse(responseLedgerFP)["value"].Any()))
            {
                var noResultResponse = new JObject();
                noResultResponse.Add("CurrentPeriod", currentOpenPeriod);
                noResultResponse.Add("MinimumYear", minYear);
                noResultResponse.Add("IsSuccessful", false);
                return noResultResponse.ToString();
            }

            var ledgerFiscalPeriods = JObject.Parse(responseLedgerFP)["value"];

            foreach (var ledgerFP in ledgerFiscalPeriods)
            {
                var responseFP = await _service.GetFiscalPeriodsAsync(ledgerFP["PeriodName"].ToString(), ledgerFP["Calendar"].ToString(), (int)ledgerFP["YearName"]);

                //Add the property "StartDate" and "EndDate" to the JObject response...
                if (!string.IsNullOrEmpty(responseFP))
                {
                    var combinedObject = new JObject();
                    var responseFPJson = JObject.Parse(responseFP)["value"];

                    if (responseFPJson != null && responseFPJson.Any())
                    {
                        // Add existing properties from ledgerFP
                        combinedObject.Add("LedgerName", ledgerFP["LedgerName"]);
                        combinedObject.Add("Calendar", ledgerFP["Calendar"]);
                        combinedObject.Add("YearName", ledgerFP["YearName"]);
                        combinedObject.Add("PeriodName", ledgerFP["PeriodName"]);
                        combinedObject.Add("LegalEntityId", ledgerFP["LegalEntityId"]);

                        // Add "StartDate" and "EndDate" from responseFP
                        combinedObject.Add("StartDate", responseFPJson[0]["StartDate"]);
                        combinedObject.Add("EndDate", responseFPJson[0]["EndDate"]);

                        combinedEntities.Add(combinedObject);
                    }
                }
            }

            if (combinedEntities.Count() > 0)
            {
                currentOpenPeriodJson = combinedEntities.OrderByDescending(x => x["StartDate"]).FirstOrDefault();
                DateTime period = Convert.ToDateTime(currentOpenPeriodJson["StartDate"]);
                currentOpenPeriod = $"{period.Year} {period.ToString("MM")}"; //Format: "YYYY MM"
                minYear = $"{period.Year}";

                //Get Company Name
                var responseCompany = await _service.GetCompanyAsync(dataAreaId);
                var responseCompanyJson = JObject.Parse(responseCompany)["value"];
                responseJson.Add("CompanyName", responseCompanyJson[0]["NameAlias"]);
                responseJson.Add("CurrentPeriod", currentOpenPeriod);
                responseJson.Add("MinimumYear", minYear);
            }
            else
            {
                responseJson.Add("CurrentPeriod", currentOpenPeriod);
                responseJson.Add("MinimumYear", minYear);
                responseJson.Add("IsSuccessful", false);
            }
            
            return responseJson.ToString();
        }

        public async Task<string> GetCompanyAsync(string legalEntityId)
        {
            var response = await _service.GetCompanyAsync(legalEntityId);
            var responsePayload = await _liquidTemplateService.GetLiquidTemplateAsync(response, LiquidTemplateConstants.RESPONSE_GET_COMPANY_RECORD_TEMPLATE);
            return responsePayload.ToString();
        }
    }
}
