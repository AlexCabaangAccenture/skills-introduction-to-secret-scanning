using CAT.App.D365.Service.Core.Models;
using CAT.App.D365.Service.Core.Utilities.Interface;
using CAT.App.D365.Service.Infra.Service;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CAT.App.D365.Service.Core;
using Newtonsoft.Json;
using DotLiquid;

namespace CAT.App.D365.Service.Application.Service
{
    public class CustomerApplication : ICustomerApplication
    {
        private readonly ICustomerService _service;
        private readonly ILiquidTemplateService _liquidTemplateService;

        public CustomerApplication(ICustomerService service, ILiquidTemplateService liquidTemplateService)
        {
            _liquidTemplateService = liquidTemplateService;
            _service = service;
        }

        public async Task<string> CreateCustomerAsync(string customerInfo)
        {
            try
            {
                //TODO: CleanUp
                //Create Customer
                var payloadCustomer = await _liquidTemplateService.GetLiquidTemplateAsync(customerInfo, LiquidTemplateConstants.CREATE_CUSTOMER_RECORD_TEMPLATE);
                var responseCustomer = await _service.CreateCustomerAsync(payloadCustomer);
                //Create PartyContact 
                dynamic customer = JsonConvert.DeserializeObject<dynamic>(responseCustomer);
                
                if (string.IsNullOrEmpty(customer.PartyNumber?.ToString()))
                {
                    throw new Exception("Could not retrieve Party(Account) Number");
                }
                if (string.IsNullOrEmpty(customer.dataAreaId?.ToString()))
                {
                    throw new Exception("Could not retrieve Company Code");
                }
                string dataAreaId = customer.dataAreaId?.ToString();
                string partyNumber = customer.PartyNumber?.ToString();
                var payloadPartyContact = await _liquidTemplateService.GetLiquidTemplateAsync(customerInfo, LiquidTemplateConstants.CREATE_PARTYCONTACT_RECORD_TEMPLATE);
                dynamic partyContact = JsonConvert.DeserializeObject<dynamic>(payloadPartyContact);
                foreach (dynamic item in partyContact.PartyContact)
                {
                    item.Add(new JProperty("PartyNumber", partyNumber));
                    var ResponsePartyContact = await _service.CreatePartyContactsAsync(dataAreaId, partyNumber, item.ToString());
                }
                var responsePayload = await _liquidTemplateService.GetLiquidTemplateAsync(responseCustomer, LiquidTemplateConstants.CUSTOMER_CREATE_RESPONSE_TEMPLATE);

                return responsePayload;
            }
            catch (Exception ex) 
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<string> GetCustomerAsync(string companyId, string customerAccount)
        {
            try
            {
                var response = await _service.GetCustomerAsync(companyId, customerAccount);
                var responsePayload = await _liquidTemplateService.GetLiquidTemplateAsync(response, LiquidTemplateConstants.RESPONSE_GET_CUSTOMER_RECORD_TEMPLATE);
                return responsePayload.ToString();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<string> UpdateCustomerAsync(string customerInfo, string companyId, string customerAccount)
        {
            try
            {
                //Update customer record
                var payloadCustomer = await _liquidTemplateService.GetLiquidTemplateAsync(customerInfo, LiquidTemplateConstants.UPDATE_CUSTOMER_RECORD_TEMPLATE);
                var responseCustomer = await _service.UpdateCustomerAsync(payloadCustomer, companyId, customerAccount);

                //Retrieve updated customer record
                var responseGetCustomer = await _service.GetCustomerAsync(companyId, customerAccount);
                var responseRetrieveCustomer = await _liquidTemplateService.GetLiquidTemplateAsync(responseGetCustomer, LiquidTemplateConstants.RESPONSE_GET_CUSTOMER_RECORD_TEMPLATE);
                dynamic customer = JsonConvert.DeserializeObject<dynamic>(responseRetrieveCustomer);
                if (string.IsNullOrEmpty(customer.PartyNumber?.ToString()))
                {
                    throw new Exception("Could not retrieve Party(Account) Number");
                }

                string partyNumber = customer.PartyNumber?.ToString();

                //Retrieve existing PartyContact
                var responseGetPartyContact = await _service.GetPartyContactsAsync(partyNumber);
                JObject existingPartyContact = JsonConvert.DeserializeObject<JObject>(responseGetPartyContact);

                //Update PartyContact
                string payloadPartyContact = await _liquidTemplateService.GetLiquidTemplateAsync(customerInfo, LiquidTemplateConstants.UPDATE_PARTYCONTACT_RECORD_TEMPLATE);
                dynamic partyContact = JsonConvert.DeserializeObject<dynamic>(payloadPartyContact);
                

                foreach (dynamic item in partyContact.PartyContact)
                {
                    dynamic payload = existingPartyContact["value"].Where(c => c["AVADBSPartyContactID"] == item.AVADBSPartyContactID).Select(c => c["ElectronicAddressId"]).FirstOrDefault();
                    var ResponsePartyContact = await _service.UpdatePartyContactsAsync(partyNumber, payload?.ToString(), item.AVADBSPartyContactID?.ToString(), item?.ToString());
                }

                ////retrieve updated records
                //var response = await _service.GetCustomerAsync(companyId, customerAccount);
                
                //var responsePayload = await _liquidTemplateService.GetLiquidTemplateAsync(response, LiquidTemplateConstants.RESPONSE_GET_CUSTOMER_RECORD_TEMPLATE);
                return responseRetrieveCustomer.ToString();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }
    }
}
